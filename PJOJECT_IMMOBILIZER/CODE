
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma CONFIG statements should precede project file includes.
// Use project ENUM instead of #define for ON and OFF.


#include <xc.h>
#define _XTAL_FREQ  20000000//  set to clock frequency
#define ConfigurationMode_0x80 0x80  //configure mode set to 0x80(10000000) based on can control register by mode0 operation
#define ListenOnlyMode_0x60  0x60   // ListenOnly Mode  set to 0x60(01100000) based on can control register by mode0 operation
#define LoopbackMode_0x40 0x40     //Loopback Mode set to 0x40(01000000) based on can control register by mode0 operation
#define DisableMode_0x20 0x20    // DisableMode set to 0x20(00010000) based on can control register by mode0 operation
#define NormalMode_0x00 0x00    //NormalMode set to 0x00(00000000) based on can control register by mode0 operation
#define CANCON_TransmitBuffer_0 0x08  // Set to CANCON_TransmitBuffer_0
#define CANCON_TransmitBuffer_1 0x06  //set to CANCON_TransmitBuffer_1
#define CANCON_TransmitBuffer_2 0x04  // set toCANCON_TransmitBuffer_2
#define TransmitAtHighPriority 0x0B   // set to priority
enum Tx_Buffer{Transfer_Buffer_0, Transfer_Buffer_1, Transfer_Buffer_2}; //define ENUM for TX_Buffer
enum Rx_Buffer{Receiver_Buffer_0, Receiver_Buffer_1}; //define ENUM for RX_Buffer 
char Rx_data_11bytes_Buffer_0[11]={0};//define RX_data_11bytes_Buffer_0
char Tx_data_8bytes_Buffer_0[8]= {0};//define TX_data_11bytes_Buffer_0
int flag=0;//define flag is equal to zero
int can_flag=0;//define flag is equal to zero
unsigned int Rx_data_11bytes_msgid;//declare RX_data_11bytes_MSG id
  
int Sys_Init()
{
    GIE=1;//Global Interrupt Enable
    PEIE=1;//Peripheral Interrupt Enable
    
}
int CANSTAT_Get_Mode(void)
{
    if((CANSTAT == NormalMode_0x00)) // check the condition
    {
        return 1;   
    }// 
    else if((CANSTAT == DisableMode_0x20)) // check the condition
    {
        return 1;
    }
    else if ((CANSTAT == LoopbackMode_0x40)) // check the condition
    {
        return 1;
    }
    else if ((CANSTAT == ListenOnlyMode_0x60)) // check the condition
    {
        return 1;
    }
    else if ((CANSTAT == ConfigurationMode_0x80))// check the condition
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void CANCON_Set_Mode(int mode)
{
    
    switch(mode)
    {
        case 0:
            CANCON = ConfigurationMode_0x80;// CANCON Register set to configure mode
            break;
        case 1:
            CANCON = ListenOnlyMode_0x60; // CANCON Register set to listen mode
            break;
        case 2:
            CANCON = LoopbackMode_0x40;// CANCON Register set to loop back mode
        case 3:
            CANCON = DisableMode_0x20;// CANCON Register set to disable mode
        case 4:
            CANCON = NormalMode_0x00;// CANCON Register set to normal mode
    }
}  
void Can_Init()
{
    TRISBbits.RB2   = 0;  //RB2 bit is set for output
    TRISBbits.RB3   = 1;  //RB3 bit is set for input 
    PIE3bits.RXB0IE = 1;  //Enable receiver buffer 0 interrupt
    IPR3bits.RXB0IP = 1;  //Enable receiver buffer 0 as high priority
    
    
}
void Set_BaudRate()  // baud rate function
{
    BRGCON1=0xC1;  //BRGCON1 register set to be 0XC1 for 250KBPS.
    BRGCON2=0xAE;   //BRGCON2 register set to be 0xAE for 250KBPS.
    BRGCON3=0x45;   //BRGCON3 register set to be 0x45 for 250kBPS.
    
}
void Set_Filter()    //acceptance filter function
{
    RXF0SIDH=0x00;  // RXF0SIDH register set to 0x00.
    RXF0SIDL=0x00;  // RXF0SIDL register set to 0x00.
    
}
void Set_Mask()     //acceptance mack function
{
    RXM0SIDH=0x00;  //RXM0SIDH register set to 0x00;
    RXM0SIDL=0x00;  //RXM0SIDL register set to 0x00;
    
}   

int Tx_Buffer(char Transfer_buffer, char byte_0,char byte_2)// TX_Buffer function
{ 
    switch(Transfer_buffer)
    {
        case 0:
            CANCON = CANCON_TransmitBuffer_0;
            TXB0SIDH=0x10;//HigherByte_8bits
            TXB0SIDL=0x00;//LowByte_3bits
            TXB0DLC = 0x08;//DLC
            TXB0D0 = byte_0;   //data_byte_0   
            TXB0D1 = Tx_data_8bytes_Buffer_0[1];//data_byte_1
            TXB0D2 =  byte_2;//data_byte_2
            TXB0D3 = Tx_data_8bytes_Buffer_0[3];//data_byte_3
            TXB0D4 = Tx_data_8bytes_Buffer_0[4];//data_byte_4
            TXB0D5 =  byte_0;//data_byte_5
            TXB0D6 = byte_2;//data_byte_6
            TXB0D7 = Tx_data_8bytes_Buffer_0[7];//data_byte_7
            TXB0CON = TransmitAtHighPriority;//enable the TXBnCON  such that the transmitter buffer and assign the highest priority to the chosen buffer.
            break;
    }//switch ends  
    CANCON=NormalMode_0x00;
}

void CAN_Read_fun()
{
    CANCON=0x0C;//Select Normal Mode and Select Receive Buffer_0.   
    Rx_data_11bytes_Buffer_0[0] =  RXB0D0;//data_byte_0
    Rx_data_11bytes_Buffer_0[1] =  RXB0D1;//data_byte_1
    Rx_data_11bytes_Buffer_0[2] =  RXB0D2;//data_byte_2
    Rx_data_11bytes_Buffer_0[3] =  RXB0D3;//data_byte_3
    Rx_data_11bytes_Buffer_0[4] =  RXB0D4;//data_byte_4
    Rx_data_11bytes_Buffer_0[5] =  RXB0D5;//data_byte_5
    Rx_data_11bytes_Buffer_0[6] =  RXB0D6;//data_byte_6
    Rx_data_11bytes_Buffer_0[7] =  RXB0D7;//data_byte_7 
    Rx_data_11bytes_Buffer_0[8] =  RXB0SIDL;//LowByte_3bits
    Rx_data_11bytes_Buffer_0[9] =  RXB0SIDH ;//HigherByte_8bits
    Rx_data_11bytes_Buffer_0[10] = RXB0DLC;//DLC 
    Rx_data_11bytes_msgid=Rx_data_11bytes_Buffer_0[9]<<3|Rx_data_11bytes_Buffer_0[8]>>5;
    RXB0CONbits.RXB0FUL = 0;
    CANCON=NormalMode_0x00;//Resetting the Receiver Buffer_0 000 and set mode to Normal Mode  to get next data
}
__interrupt () ISR1()
{
    CANCON=NormalMode_0x00;
    if(RXB0IF)
    {
        RXB0IF=0;//Clear The Interrupt enable flag
        CAN_Read_fun();//CAN RX is called 
    }
        
  
can_flag=1;  
}

void main(void) 
{
    RBPU=0;             //PORTB pull-ups are enabled by individual port latch values 
    TRISCbits.RC1=0;    //LED OUTPUT
    TRISBbits.RB0=1;    //SWITCH1 DOOR INPUT FOR UNLOCK
    TRISBbits.RB1=1;    //SWITCH1 DOOR INPUT FOR LOCK
    TRISCbits.RC2=0;    //BUZZER OUTPUT
    Sys_Init();         // calling Sys_INIT function
    Can_Init();         // calling can_INIT function
    CANCON_Set_Mode(0);//Set Configuration Mode  the CANCON Register 
    Set_Mask();        // calling Set_Mask function
    Set_Filter();      // calling Set_Filter function
    Set_BaudRate();     // calling Set_BaudRate function
    CANCON_Set_Mode(4);     //Set Normal Mode
    while(1)
    {  
        if(PORTBbits.RB0==0) //PUSH BUTTON(SWITCH1 DOOR INPUT FOR UNLOCK )
        {
           Tx_Buffer(Transfer_Buffer_0,0x0C,0x80);// calling function and passing parameters
           PORTCbits.RC2=1;// BUZZER ON
           PORTCbits.RC1=1;// LED ON
           __delay_ms(3000);// DELAY for 1 sec
           PORTCbits.RC2=0;//BUZZER OFF
           PORTCbits.RC1=0;// LED OFF
        }
        if(PORTBbits.RB1==0)  //PUSH BUTTON ((SWITCH1 DOOR INPUT FOR LOCK )
        {
            Tx_Buffer(Transfer_Buffer_0,0x0A,0x70);// calling function and passing parameters
            for(int i=0;i<3;i++) //LED WILL BLINK 3 TIMES
             {
               PORTCbits.RC1=1;//led on
             __delay_ms(1000);//delay
               PORTCbits.RC1=0;//led off
              __delay_ms(1000);// delay
             }
            for(int i=0;i<2;i++)//buzzer WILL BLINK 6 TIMES
             {
               PORTCbits.RC2=1;//buzzer on
             __delay_ms(1000);// delay
               PORTCbits.RC2=0;//buzzer off
              __delay_ms(1000);// delay
             }
        }
        if(can_flag==1)// check condition
        {
            if(Rx_data_11bytes_msgid==0x03) // check the id    
            {
                flag++;// increment the flag
                can_flag=0;//can_flag set to zero
            if(Rx_data_11bytes_Buffer_0[5]==0x0A && Rx_data_11bytes_Buffer_0[6]==0x70)// check the data for lock
            {
                flag=0;//flag set to zero
                PORTCbits.RC2=1;//buzzer on
               __delay_ms(3000);// delay
               PORTCbits.RC2=0;//buzzer off
              __delay_ms(3000);// delay
            }
            else if(Rx_data_11bytes_Buffer_0[0]==0x0C && Rx_data_11bytes_Buffer_0[2]==0x80)//check the data for unlock
            {
                flag=0;
                PORTCbits.RC1=1;//led on
                PORTCbits.RC2=1;//buzzer on
                __delay_ms(3000);//delay
                PORTCbits.RC1=0;//led off
                PORTCbits.RC2=0;//buzzer off
                __delay_ms(3000);//delay
            }
            else
            {
                if(flag==1)//check the flag
                {
                    for(int i=0;i<3;i++)// check the conditions buzzer 3 times for 1sec
                    {
                        PORTCbits.RC2=1;//buzzer on
                       __delay_ms(1000);//delay
                       PORTCbits.RC2=0;//buzzer off
                        __delay_ms(1000);//delay
                    }
                }
                else if(flag==2)//check the flag
                {
                    for(int i=0;i<6;i++) // check the conditions buzzer 6 times for 1sec
                    {
                        PORTCbits.RC2=1;//buzzer on
                        __delay_ms(1000);//delay
                        PORTCbits.RC2=0;//buzzer off
                        __delay_ms(1000);//delay
                    }
                }
                else if(flag==3)//check the flag
                {
                    PORTCbits.RC2=1; //buzzer on      
                   __delay_ms(10000);//delay
                }
            }
            }
        }
    }
}
            
                
              
       

